{"version":3,"sources":["components/Home.js","charts/MyBarChart.js","charts/MyLineChart.js","charts/MyPieChart.js","components/GlobalView.js","charts/MyDailyLineChart.js","charts/MyDailyBarChart.js","components/DailyView.js","charts/CustomLineChart.js","charts/CustomBarChart.js","components/CustomView.js","App.js","index.js"],"names":["Home","id","React","Component","mountToNamesDict","1","2","3","4","5","6","7","8","9","10","11","12","t_nuclear","t_thermal","t_renewable","t_heat_power","t_hydro","t_pumped_hydro","MyBarChart","current_date","data","data_import","JSON","parse","localStorage","getItem","Object","entries","forEach","element","split","text_date","parseInt","push","name","Nuclear","Thermal","Renewable","Heat_Power","Hydro","Pumped_Hydro","reverse","pop","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stackId","fill","t_production","t_consuming","MyLineChart","Consuming","Production","type","stroke","activeDot","r","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","textAnchor","dominantBaseline","toFixed","MyPieChart","data01","value","labelLine","label","map","entry","length","GlobalView","MyDailyLineChart","current_time","founded","counter","i","MyDailyBarChart","DailyView","CustomLineChart","endDate","Date","startDate","d","getTime","CustomView","range","text_end_date","selection","getFullYear","getMonth","getDate","setItem","text_start_date","this","setState","state","selectionRange","key","minDate","maxDate","shownDate","ranges","editableDateInputs","onChange","handleSelect","CustomBarChart","old_keys","App","useEffect","csv","process","then","earray","j","o","edata","clear","stringify","className","to","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87a34e04.chunk.js","sourcesContent":["import React from \"react\";\nimport '../style/home.css';\nclass Home extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Description:</h1>\n      <p>We have a <strong>\"Global page\"</strong> which contains visualization and plots with general information such as</p>\n        <ol>\n          <li>Diagram about how much energy of each type was developed from 2014.</li>\n          <li>The plot which shows statistic per each energy source.</li>\n          <li>Percentage changes.</li>\n          <li>Plot with consumed and produced energy in order to show energy losses.</li>\n        </ol>\n        We have a <strong>\"Daily page\"</strong> which contains information about each day separately in order to prevent some information loss.\n        On this page you can see:\n        <ol>\n          <li>Hours of producing for each energy.</li>\n          <li>The total amount of produced and consumed energy.</li>\n        </ol>\n        <p>You could define time limits and see a plot as you wish on the <strong>\"Custom page\"</strong>.</p>\n      <p><strong>Author: Yurii Kazan</strong></p>\n    </div>)\n    }\n}\nexport default Home;","import React from \"react\";\nimport {\n        BarChart, \n        Bar, \n        Cell, \n        XAxis, \n        YAxis, \n        CartesianGrid, \n        Tooltip, \n        Legend,\n        } from 'recharts';\n\n\nlet mountToNamesDict = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5: \"May\", 6 : \"Jun\", 7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"};\nlet t_nuclear = 0,t_thermal = 0,t_renewable = 0,t_heat_power = 0,t_hydro = 0,t_pumped_hydro  = 0;\nclass MyBarChart extends React.Component{\n    render(){\n      let data = [];\n      let current_date;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n          if (!current_date){\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          if (element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2] !== current_date){\n            let text_date = mountToNamesDict[parseInt(current_date.split('.')[0])] + \" \" + current_date.split('.')[1]\n            data.push({name: text_date,\n                       Nuclear:t_nuclear,\n                       Thermal:t_thermal,\n                       Renewable:t_renewable,\n                       Heat_Power: t_heat_power,\n                       Hydro: t_hydro,\n                       Pumped_Hydro: t_pumped_hydro});\n            t_nuclear = 0;\n            t_thermal = 0;\n            t_renewable = 0;\n            t_heat_power = 0;\n            t_hydro = 0;\n            t_pumped_hydro  = 0;\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          else {\n            t_nuclear += parseInt(element[1][1]);\n            t_thermal += parseInt(element[1][2]);\n            t_renewable += parseInt(element[1][3]);\n            t_heat_power += parseInt(element[1][4]);\n            t_hydro += parseInt(element[1][5]);\n            t_pumped_hydro += parseInt(element[1][6]);\n          }\n      });\n      data = data.reverse();\n      data.pop();\n        return (\n          <BarChart\n            width={1200}\n            height={600}\n            data={data}\n            margin={{\n              top: 20, right: 30, left: 20, bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"Nuclear\" stackId=\"a\" fill=\"#0088AA\" />\n            <Bar dataKey=\"Thermal\" stackId=\"a\" fill=\"#00C49F\" />\n            <Bar dataKey=\"Renewable\" stackId=\"a\" fill=\"#FFBB28\" />\n            <Bar dataKey=\"Heat_Power\" stackId=\"a\" fill=\"#FF8042\" />\n            <Bar dataKey=\"Hydro\" stackId=\"a\" fill=\"#AAFF88\" />\n            <Bar dataKey=\"Pumped_Hydro\" stackId=\"a\" fill=\"#28BBFF\" />\n          </BarChart>\n        );\n      }\n}\nexport default MyBarChart;","import React from \"react\";\nimport { Line,\n         LineChart,\n         CartesianGrid,\n         Tooltip,\n         XAxis,\n         YAxis,\n         Legend } from 'recharts';\n\nlet mountToNamesDict = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5: \"May\", 6 : \"Jun\", 7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"};\n\nlet t_production = 0,t_consuming = 0;\nclass MyLineChart extends React.Component{\n    render(){\n      let data = [];\n      let current_date;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n          if (!current_date){\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          if (element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2] !== current_date){\n            let text_date = mountToNamesDict[parseInt(current_date.split('.')[0])] + \" \" + current_date.split('.')[1]\n            data.push({name: text_date,Consuming:t_consuming,Production:t_production});\n            t_production = 0;\n            t_consuming = 0;\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          else {\n            t_production += parseInt(element[1][1]) + parseInt(element[1][2]) + parseInt(element[1][3]) + parseInt(element[1][4]) + parseInt(element[1][5]) + parseInt(element[1][6]);\n            t_consuming += parseInt(element[1][7]);\n          }\n      });\n      data = data.reverse();\n      data.pop();\n        return(\n            <LineChart\n                    width={1200}\n                    height={600}\n                    data={data}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n            >\n                    <CartesianGrid strokeDasharray=\"59015 1000\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Consuming\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <Line type=\"monotone\" dataKey=\"Production\" stroke=\"#82ca9d\" />\n            </LineChart>\n        )\n    }\n}\nexport default MyLineChart;","import { PieChart, Pie,Cell, Legend, Tooltip } from 'recharts';\nimport React from \"react\";\n\nconst COLORS = ['#0088AA', '#00C49F', '#FFBB28', '#FF8042','#AAFF88','#28BBFF'];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\nlet t_nuclear = 0,t_thermal = 0,t_renewable = 0,t_heat_power = 0,t_hydro = 0,t_pumped_hydro  = 0;\nclass MyPieChart extends React.Component{\n    render(){\n        let data = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data).forEach(element => {\n            t_nuclear += parseInt(element[1][1]);\n            t_thermal += parseInt(element[1][2]);\n            t_renewable += parseInt(element[1][3]);\n            t_heat_power += parseInt(element[1][4]);\n            t_hydro += parseInt(element[1][5]);\n            t_pumped_hydro += parseInt(element[1][6]);\n        });\n        const data01 = [\n            { name: 'Nuclear', value: t_nuclear },\n            { name: 'Thermal', value: t_thermal },\n            { name: 'Renewable', value: t_renewable },\n            { name: 'Heat Power', value: t_heat_power },\n            { name: 'Hydro', value: t_hydro },\n            { name: 'Pumped Hydro', value: t_pumped_hydro }\n          ];\n        return(                \n        <PieChart width={1200} height={600}>\n            <Pie\n                data={data01}\n                cx={600}\n                cy={300}\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={200}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n            >\n                {\n                    data01.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n                }\n            </Pie>\n            <Legend />\n            <Tooltip />\n        </PieChart>);\n    }\n}\nexport default MyPieChart;","import React from 'react';\nimport MyBarChart from '../charts/MyBarChart';\nimport MyLineChart from '../charts/MyLineChart';\nimport MyPieChart from \"../charts/MyPieChart\";\nimport '../style/views.css'\nclass GlobalView extends React.Component{\n\n    render(){\n        return(\n            <div id=\"main_body\">\n                <div id='chart_holder'>\n                    <MyLineChart/>\n                    <div id='analysis'>\n                        <h3>Comment:</h3>\n                        <p>As you can see, from this chart energy production is always higher than consumption.\n                           (Difference is lost during transport, that obvious). \n                           Also, we can see that energy consumption is higher during winter (more energy is spent on climate control at offices and homes). \n                           And during winter losses are bigger, because the colder it is outside, the harder energy transporting is)</p>\n                    </div>\n                </div>\n                <div id='chart_holder'>\n                    <MyPieChart/>\n                    <div id='analysis'>\n                        <h3>Comment:</h3>\n                        <p>As you can see, from this chart Ukraine main energy source is Nuclear.\n                           Very small part is Renewable and Hydro (which can increase our ecological situation).</p>\n                    </div>\n                </div>\n                <div id='chart_holder'>\n                    <MyBarChart/>\n                    <div id='analysis'>\n                        <h3>Comment:</h3>\n                        <p>As you can see, from this chart value of Nuclear energy doesn't change dramatically. Renewable energy increased by 8 times. But also hydro decreased almost by 2 times. Heat Power decreased by 1.5 times.\n                           Also you can notice that total energy consumption decreased from 2014 to 2016 and after that remains the same.\n                        </p>\n                    </div>\n                </div>\n\n            </div>)\n    }\n}\nexport default GlobalView;","import React from \"react\";\nimport { Line,\n         LineChart,\n         CartesianGrid,\n         Tooltip,\n         XAxis,\n         YAxis,\n         Legend } from 'recharts';\n\nlet t_production = 0,t_consuming = 0;\nclass MyDailyLineChart extends React.Component{\n    render(){\n      let data = [];\n      let founded = false;\n      let current_time;\n      let counter = 1;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n            t_production += parseInt(element[1][1]) + parseInt(element[1][2]) + parseInt(element[1][3]) + parseInt(element[1][4]) + parseInt(element[1][5]) + parseInt(element[1][6]);\n            t_consuming += parseInt(element[1][7]);\n            for (let i = 0; i < data.length; i++){\n                if (data[i].name === current_time){\n                    data[i].Consuming += t_consuming;\n                    counter += 1;\n                    data[i].Production += t_production;\n                    founded = true;\n                    break;\n                }\n            }\n            if (!founded)\n                    data.push({name: current_time,Consuming:t_consuming,Production:t_production});\n                t_production = 0;\n                t_consuming = 0;\n                founded = false;\n                current_time = element[1][0].split(' ')[1].split(':')[0];\n          }\n      );\n\n      data = data.reverse();\n      data.pop()\n      for (let i = 0; i < data.length; i++){\n        data[i].Consuming /= counter;\n        data[i].Production /= counter;\n      }\n        return(\n            <LineChart\n                    width={1200}\n                    height={600}\n                    data={data}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n            >\n                    <CartesianGrid strokeDasharray=\"59015 1000\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Consuming\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <Line type=\"monotone\" dataKey=\"Production\" stroke=\"#82ca9d\" />\n            </LineChart>\n        )\n}\n}\nexport default MyDailyLineChart;","import React from \"react\";\nimport {\n        BarChart, \n        Bar, \n        Cell, \n        XAxis, \n        YAxis, \n        CartesianGrid, \n        Tooltip, \n        Legend,\n        } from 'recharts';\n\n\nlet t_nuclear = 0,t_thermal = 0,t_renewable = 0,t_heat_power = 0,t_hydro = 0,t_pumped_hydro  = 0;\nclass MyDailyBarChart extends React.Component{\n    render(){\n      let data = [];\n      let founded = false;\n      let current_time;\n      let counter = 1;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n            for (let i = 0; i < data.length; i++){\n                if (data[i].name === current_time){\n                    data[i].Nuclear += parseInt(element[1][1]);\n                    data[i].Thermal += parseInt(element[1][2]);\n                    data[i].Renewable += parseInt(element[1][3]);\n                    data[i].Heat_Power += parseInt(element[1][4]);\n                    data[i].Hydro += parseInt(element[1][5]);\n                    data[i].Pumped_Hydro += parseInt(element[1][6]);\n                    counter += 1;\n                    founded = true;\n                    break;\n                }\n            }\n            if (!founded){\n            data.push({name: current_time,\n                       Nuclear:t_nuclear,\n                       Thermal:t_thermal,\n                       Renewable:t_renewable,\n                       Heat_Power: t_heat_power,\n                       Hydro: t_hydro,\n                       Pumped_Hydro: t_pumped_hydro});\n            }\n            t_nuclear = 0;\n            t_thermal = 0;\n            t_renewable = 0;\n            t_heat_power = 0;\n            t_hydro = 0;\n            t_pumped_hydro  = 0;\n            founded = false;\n            current_time = element[1][0].split(' ')[1].split(':')[0];\n          }\n      );\n      data = data.reverse();\n      data.pop();\n      for (let i = 0; i < data.length; i++){\n        data[i].Nuclear /= counter;\n        data[i].Thermal /= counter;\n        data[i].Renewable /= counter;\n        data[i].Heat_Power /= counter;\n        data[i].Hydro /= counter;\n        data[i].Pumped_Hydro /= counter;\n      }\n        return (\n          <BarChart\n            width={1200}\n            height={600}\n            data={data}\n            margin={{\n              top: 20, right: 30, left: 20, bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"Nuclear\" stackId=\"a\" fill=\"#0088AA\" />\n            <Bar dataKey=\"Thermal\" stackId=\"a\" fill=\"#00C49F\" />\n            <Bar dataKey=\"Renewable\" stackId=\"a\" fill=\"#FFBB28\" />\n            <Bar dataKey=\"Heat_Power\" stackId=\"a\" fill=\"#FF8042\" />\n            <Bar dataKey=\"Hydro\" stackId=\"a\" fill=\"#AAFF88\" />\n            <Bar dataKey=\"Pumped_Hydro\" stackId=\"a\" fill=\"#28BBFF\" />\n          </BarChart>\n        );\n      }\n}\nexport default MyDailyBarChart;","import React from \"react\";\nimport MyDailyLineChart from '../charts/MyDailyLineChart';\n\nimport MyDailyBarChart from '../charts/MyDailyBarChart';\n\nimport '../style/views.css';\n\nclass DailyView extends React.Component{\n\n    render(){\n        return(\n            <div id=\"main_body\">\n                <div id='chart_holder'>\n                    <MyDailyLineChart/>\n                    <div id='analysis'>\n                        <h3>Comment:</h3>\n                        <p>This chart is pretty similar to coresponding one on Global page. From here we can see that the biggest amount of energy is consumed during from 19 to 22 hours, \n                            The smallest amount is from 4 to 6.\n                        </p>\n                    </div>\n                </div>\n                <div id='chart_holder'>\n                    <MyDailyBarChart/>\n                    <div id='analysis'>\n                        <h3>Comment:</h3>\n                        <p>This chart shows us next data:</p>\n                        <ol>\n                            <li>\n                                Nuclear energy is always const\n                            </li>\n                            <li>\n                                Heat Power energy is almost the same (se time from 00 to 08)\n                            </li>\n                            <li>\n                                Thermal energy is const\n                            </li>\n                            <li>\n                                Pumped Hydro starts working at 10 and finish at 00\n                            </li>\n                            <li>\n                                Hydro is almost the same as Pumped Hydro\n                            </li>\n                        </ol>\n                    </div>\n                </div>\n\n            </div>)\n    }\n}\nexport default DailyView;","import React from \"react\";\nimport { Line,\n         LineChart,\n         CartesianGrid,\n         Tooltip,\n         XAxis,\n         YAxis,\n         Legend } from 'recharts';\n\nlet mountToNamesDict = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5: \"May\", 6 : \"Jun\", 7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"};\n\nlet t_production = 0,t_consuming = 0;\nclass CustomLineChart extends React.Component{\n    render(){\n        let endDate = new Date(localStorage.getItem('endDate'));\n        let startDate = new Date(localStorage.getItem('startDate'));\n      let data = [];\n      let current_date;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n        let d = new Date(element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0]);\n        if ((d.getTime() > startDate.getTime()) && (d.getTime() < endDate.getTime())){\n          if (!current_date){\n            current_date = element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0];\n          }\n          if (element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0] !== current_date){\n            let text_date = current_date.split('-')[2] + \" \" + mountToNamesDict[parseInt(current_date.split('-')[1])] + \" \" + current_date.split('-')[0]\n            data.push({name: text_date,Consuming:t_consuming,Production:t_production});\n            t_production = 0;\n            t_consuming = 0;\n            current_date = element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0];\n          }\n          else {\n            t_production += parseInt(element[1][1]) + parseInt(element[1][2]) + parseInt(element[1][3]) + parseInt(element[1][4]) + parseInt(element[1][5]) + parseInt(element[1][6]);\n            t_consuming += parseInt(element[1][7]);\n          }\n        }\n      });\n      data = data.reverse();\n      data.pop();\n        return(\n            <LineChart\n                    width={1200}\n                    height={600}\n                    data={data}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n            >\n                    <CartesianGrid strokeDasharray=\"59015 1000\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Consuming\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <Line type=\"monotone\" dataKey=\"Production\" stroke=\"#82ca9d\" />\n            </LineChart>\n        )\n    }\n}\nexport default CustomLineChart;","import React from \"react\";\nimport {\n        BarChart, \n        Bar, \n        Cell, \n        XAxis, \n        YAxis, \n        CartesianGrid, \n        Tooltip, \n        Legend,\n        } from 'recharts';\n\n\nlet mountToNamesDict = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5: \"May\", 6 : \"Jun\", 7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"};\nlet t_nuclear = 0,t_thermal = 0,t_renewable = 0,t_heat_power = 0,t_hydro = 0,t_pumped_hydro  = 0;\nclass MyBarChart extends React.Component{\n    render(){\n        let endDate = new Date(localStorage.getItem('endDate'));\n        let startDate = new Date(localStorage.getItem('startDate'));\n      let data = [];\n      let current_date;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n        let d = new Date(element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0]);\n        if ((d.getTime() > startDate.getTime()) && (d.getTime() < endDate.getTime())){\n            if (!current_date){\n                current_date = element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0];\n              }\n              if (element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0] !== current_date){\n                let text_date = current_date.split('-')[2] + \" \" + mountToNamesDict[parseInt(current_date.split('-')[1])] + \" \" + current_date.split('-')[0]\n                data.push({name: text_date,\n                       Nuclear:t_nuclear,\n                       Thermal:t_thermal,\n                       Renewable:t_renewable,\n                       Heat_Power: t_heat_power,\n                       Hydro: t_hydro,\n                       Pumped_Hydro: t_pumped_hydro});\n            t_nuclear = 0;\n            t_thermal = 0;\n            t_renewable = 0;\n            t_heat_power = 0;\n            t_hydro = 0;\n            t_pumped_hydro  = 0;\n            current_date = element[1][0].split(' ')[0].split('.')[2] + '-' + element[1][0].split(' ')[0].split('.')[1] + '-' + element[1][0].split(' ')[0].split('.')[0];\n          }\n          else {\n            t_nuclear += parseInt(element[1][1]);\n            t_thermal += parseInt(element[1][2]);\n            t_renewable += parseInt(element[1][3]);\n            t_heat_power += parseInt(element[1][4]);\n            t_hydro += parseInt(element[1][5]);\n            t_pumped_hydro += parseInt(element[1][6]);\n          }\n      }\n    });\n      data = data.reverse();\n      data.pop();\n        return (\n          <BarChart\n            width={1200}\n            height={600}\n            data={data}\n            margin={{\n              top: 20, right: 30, left: 20, bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"Nuclear\" stackId=\"a\" fill=\"#0088AA\" />\n            <Bar dataKey=\"Thermal\" stackId=\"a\" fill=\"#00C49F\" />\n            <Bar dataKey=\"Renewable\" stackId=\"a\" fill=\"#FFBB28\" />\n            <Bar dataKey=\"Heat_Power\" stackId=\"a\" fill=\"#FF8042\" />\n            <Bar dataKey=\"Hydro\" stackId=\"a\" fill=\"#AAFF88\" />\n            <Bar dataKey=\"Pumped_Hydro\" stackId=\"a\" fill=\"#28BBFF\" />\n          </BarChart>\n        );\n      }\n}\nexport default MyBarChart;","import React from \"react\";\nimport { DateRangePicker } from 'react-date-range';\nimport CustomLineChart from '../charts/CustomLineChart';\nimport CustomBarChart from '../charts/CustomBarChart';\n\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\n\nclass CustomView extends React.Component{\n\n    handleSelect(range){\n        let text_end_date = range.selection.endDate.getFullYear() + \"-\" + range.selection.endDate.getMonth() + 1 + '-' + range.selection.endDate.getDate();\n        localStorage.setItem(\"endDate\",text_end_date);\n        let text_start_date = range.selection.startDate.getFullYear() + \"-\" + range.selection.startDate.getMonth() + 1 + '-' + range.selection.startDate.getDate();\n        localStorage.setItem(\"startDate\",text_start_date);\n        this.setState({ state: this.state });\n    }\n\n    render(){\n      const selectionRange = {\n        startDate: new Date(\"2014-01-01\"),\n        endDate: new Date(\"2014-01-01\"),\n        key: 'selection',\n      }\n      return(\n        <div id=\"main_body\">\n          <h3>This section wouldn't have any analytics. This is just for deeper understanding</h3>\n          <DateRangePicker\n            minDate = {new Date(\"2014-01-01\")}\n            maxDate = {new Date(\"2020-03-10\")}\n            shownDate = {new Date(\"2014-01-01\")}\n            ranges={[selectionRange]}\n            editableDateInputs={true}\n            onChange={(range) => {this.handleSelect(range)}}\n          />\n            <div id='chart_holder'>\n              <CustomLineChart/>\n              </div>\n                <div id='chart_holder'>\n                    <CustomBarChart></CustomBarChart>\n                </div>\n        </div>)\n    }\n}\nexport default CustomView;","import React from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nimport Home from './components/Home';\nimport GlobalView from './components/GlobalView';\nimport DailyView from './components/DailyView';\nimport CustomView from './components/CustomView';\nimport {useEffect} from 'react';\nimport { csv } from \"d3-fetch\";\n\nlet old_keys = [\"datetime\",\"production_nuclear\",\"production_thermal\",\"production_renewable\",\"production_heat_power\",\"production_hydro\",\"production_pumped_hydro\",\"consumption_total\"]\nfunction App() {\n  useEffect(() => {\n    csv(process.env.PUBLIC_URL + `/electricity.csv`).then((data) => {\n      let earray = {}\n      for (let j = 0; j < data.length; j++){\n        let o = data[j];\n        let edata = []\n      for (let i = 0; i < old_keys.length; i++){\n        edata.push(o[old_keys[i]]);\n      }\n      earray[j] = edata;\n    }\n      if (localStorage.getItem(\"data\") === null){\n        localStorage.clear();\n        localStorage.setItem(\"data\",JSON.stringify(earray));\n      }\n  });\n  });\n  return (\n    <HashRouter>\n        <div>\n          <h1>Ukrainian Energy Statistic</h1>\n          <ul className=\"header\">\n            <li><NavLink to=\"/\">Home</NavLink></li>\n            <li><NavLink to=\"/global\">Global page</NavLink></li>\n            <li><NavLink to=\"/daily\">Daily page</NavLink></li>\n            <li><NavLink to=\"/custom\">Custom page</NavLink></li>\n          </ul>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/global\" component={GlobalView}/>\n            <Route path=\"/daily\" component={DailyView}/>\n            <Route path=\"/custom\" component={CustomView}/>\n          </div>\n        </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}