{"version":3,"sources":["components/Home.js","charts/MyBarChart.js","charts/MyLineChart.js","charts/MyPieChart.js","components/GlobalView.js","components/DailyView.js","components/CustomView.js","App.js","index.js"],"names":["Home","id","React","Component","mountToNamesDict","1","2","3","4","5","6","7","8","9","10","11","12","t_nuclear","t_thermal","t_renewable","t_heat_power","t_hydro","t_pumped_hydro","MyBarChart","current_date","data","data_import","JSON","parse","localStorage","getItem","Object","entries","forEach","element","split","text_date","parseInt","push","name","Nuclear","Thermal","Renewable","Heat_Power","Hydro","Pumped_Hydro","reverse","pop","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stackId","fill","t_production","t_consuming","MyLineChart","Consuming","Production","type","stroke","activeDot","r","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","textAnchor","dominantBaseline","toFixed","MyPieChart","data01","value","labelLine","label","map","entry","length","GlobalView","DailyView","CustomView","old_keys","App","useEffect","csv","process","then","earray","j","o","edata","i","clear","setItem","stringify","className","to","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f53864b9.chunk.js","sourcesContent":["import React from \"react\";\nimport '../home.css';\nclass Home extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Description:</h1>\n      <p>We have a <strong>\"Global page\"</strong> which contains visualization and plots with general information such as</p>\n        <ol>\n          <li>Diagram about how much energy of each type was developed from 2014.</li>\n          <li>The plot which shows statistic per each energy source.</li>\n          <li>Percentage changes.</li>\n          <li>Plot with consumed and produced energy in order to show energy losses.</li>\n        </ol>\n        We have a <strong>\"Daily page\"</strong> which contains information about each day separately in order to prevent some information loss.\n        On this page you can see:\n        <ol>\n          <li>Hours of producing for each energy.</li>\n          <li>The total amount of produced and consumed energy.</li>\n        </ol>\n        <p>You could define time limits and energy type and see a plot as you wish on the <strong>\"Custom page\"</strong>.</p>\n      <p><strong>Author: Yurii Kazan</strong></p>\n    </div>)\n    }\n}\nexport default Home;","import React from \"react\";\nimport {\n        BarChart, \n        Bar, \n        Cell, \n        XAxis, \n        YAxis, \n        CartesianGrid, \n        Tooltip, \n        Legend,\n        } from 'recharts';\n\n\nlet mountToNamesDict = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5: \"May\", 6 : \"Jun\", 7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"};\nlet t_nuclear = 0,t_thermal = 0,t_renewable = 0,t_heat_power = 0,t_hydro = 0,t_pumped_hydro  = 0;\nclass MyBarChart extends React.Component{\n    render(){\n      let data = [];\n      let current_date;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n          if (!current_date){\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          if (element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2] !== current_date){\n            let text_date = mountToNamesDict[parseInt(current_date.split('.')[0])] + \" \" + current_date.split('.')[1]\n            data.push({name: text_date,\n                       Nuclear:t_nuclear,\n                       Thermal:t_thermal,\n                       Renewable:t_renewable,\n                       Heat_Power: t_heat_power,\n                       Hydro: t_hydro,\n                       Pumped_Hydro: t_pumped_hydro});\n            t_nuclear = 0;\n            t_thermal = 0;\n            t_renewable = 0;\n            t_heat_power = 0;\n            t_hydro = 0;\n            t_pumped_hydro  = 0;\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          else {\n            t_nuclear += parseInt(element[1][1]);\n            t_thermal += parseInt(element[1][2]);\n            t_renewable += parseInt(element[1][3]);\n            t_heat_power += parseInt(element[1][4]);\n            t_hydro += parseInt(element[1][5]);\n            t_pumped_hydro += parseInt(element[1][6]);\n          }\n      });\n      data = data.reverse();\n      data.pop();\n        return (\n          <BarChart\n            width={1600}\n            height={600}\n            data={data}\n            margin={{\n              top: 20, right: 30, left: 20, bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"Nuclear\" stackId=\"a\" fill=\"#0088AA\" />\n            <Bar dataKey=\"Thermal\" stackId=\"a\" fill=\"#00C49F\" />\n            <Bar dataKey=\"Renewable\" stackId=\"a\" fill=\"#FFBB28\" />\n            <Bar dataKey=\"Heat_Power\" stackId=\"a\" fill=\"#FF8042\" />\n            <Bar dataKey=\"Hydro\" stackId=\"a\" fill=\"#AAFF88\" />\n            <Bar dataKey=\"Pumped_Hydro\" stackId=\"a\" fill=\"#28BBFF\" />\n          </BarChart>\n        );\n      }\n}\nexport default MyBarChart;","import React from \"react\";\nimport { Line,\n         LineChart,\n         CartesianGrid,\n         Tooltip,\n         XAxis,\n         YAxis,\n         Legend } from 'recharts';\n\nlet mountToNamesDict = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5: \"May\", 6 : \"Jun\", 7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"};\n\nlet t_production = 0,t_consuming = 0;\nclass MyLineChart extends React.Component{\n    render(){\n      let data = [];\n      let current_date;\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n          if (!current_date){\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          if (element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2] !== current_date){\n            let text_date = mountToNamesDict[parseInt(current_date.split('.')[0])] + \" \" + current_date.split('.')[1]\n            data.push({name: text_date,Consuming:t_consuming,Production:t_production});\n            t_production = 0;\n            t_consuming = 0;\n            current_date = element[1][0].split(' ')[0].split('.')[1] + '.' + element[1][0].split(' ')[0].split('.')[2];\n          }\n          else {\n            t_production += parseInt(element[1][1]) + parseInt(element[1][2]) + parseInt(element[1][3]) + parseInt(element[1][4]) + parseInt(element[1][5]) + parseInt(element[1][6]);\n            t_consuming += parseInt(element[1][7]);\n          }\n      });\n      data = data.reverse();\n        return(\n            <LineChart\n                    width={1600}\n                    height={600}\n                    data={data}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n            >\n                    <CartesianGrid strokeDasharray=\"59015 1000\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Consuming\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <Line type=\"monotone\" dataKey=\"Production\" stroke=\"#82ca9d\" />\n            </LineChart>\n        )\n    }\n}\nexport default MyLineChart;","import { PieChart, Pie,Cell, Legend, Tooltip } from 'recharts';\nimport React from \"react\";\n\nconst COLORS = ['#0088AA', '#00C49F', '#FFBB28', '#FF8042','#AAFF88','#28BBFF'];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\nlet t_nuclear = 0,t_thermal = 0,t_renewable = 0,t_heat_power = 0,t_hydro = 0,t_pumped_hydro  = 0;\nclass MyPieChart extends React.Component{\n    render(){\n        let data = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data).forEach(element => {\n            t_nuclear += parseInt(element[1][1]);\n            t_thermal += parseInt(element[1][2]);\n            t_renewable += parseInt(element[1][3]);\n            t_heat_power += parseInt(element[1][4]);\n            t_hydro += parseInt(element[1][5]);\n            t_pumped_hydro += parseInt(element[1][6]);\n        });\n        const data01 = [\n            { name: 'Nuclear', value: t_nuclear },\n            { name: 'Thermal', value: t_thermal },\n            { name: 'Renewable', value: t_renewable },\n            { name: 'Heat Power', value: t_heat_power },\n            { name: 'Hydro', value: t_hydro },\n            { name: 'Pumped Hydro', value: t_pumped_hydro }\n          ];\n        return(                \n        <PieChart width={1600} height={600}>\n            <Pie\n                data={data01}\n                cx={800}\n                cy={300}\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={200}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n            >\n                {\n                    data01.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n                }\n            </Pie>\n            <Legend />\n            <Tooltip />\n        </PieChart>);\n    }\n}\nexport default MyPieChart;","import React from 'react';\nimport MyBarChart from '../charts/MyBarChart';\nimport MyLineChart from '../charts/MyLineChart';\nimport MyPieChart from \"../charts/MyPieChart\";\n\nclass GlobalView extends React.Component{\n\n    render(){\n        return(\n            <div id=\"main_body\">\n                <MyLineChart/>\n                <MyPieChart/>\n                <MyBarChart/>\n            </div>)\n    }\n}\nexport default GlobalView;","import React from \"react\";\n\nclass DailyView extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>COVID-19 M213123ap</h1>\n      <h3>Enter date in order to get map according to that date</h3>\n      <h3>Description:</h3>\n      <p>We have two main parameters in this data piece. \n        So I would like to separate them to save as big an amount of information as possible. \n        The first variant was to show each country separately and after that manipulate with the date. \n        But this variant won't allow us to compare the information. \n        So I choose the second variant. \n        Here you can choose a date and get all maps according to that date. \n        This saves as much info as the previous case but allows us to compare it.</p>\n      <p>Made by Yurii Kazan</p>\n    </div>)\n    }\n}\nexport default DailyView;","import React from \"react\";\n\nclass CustomView extends React.Component{\n\n    render(){\n      return(\n        <div id=\"main_body\">\n          <h1>Hello world!</h1>\n          <h3>Enter date in order to get map according to that date</h3>\n          <h3>Description:</h3>\n          <p>We have two main parameters in this data piece. \n            So I would like to separate them to save as big an amount of information as possible. \n            The first variant was to show each country separately and after that manipulate with the date. \n            But this variant won't allow us to compare the information. \n            So I choose the second variant. \n            Here you can choose a date and get all maps according to that date. \n            This saves as much info as the previous case but allows us to compare it.</p>\n          <p>Made by Yurii Kazan</p>\n        </div>)\n    }\n}\nexport default CustomView;","import React from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nimport Home from './components/Home';\nimport GlobalView from './components/GlobalView';\nimport DailyView from './components/DailyView';\nimport CustomView from './components/CustomView';\nimport {useEffect} from 'react';\nimport { csv } from \"d3-fetch\";\n\nlet old_keys = [\"datetime\",\"production_nuclear\",\"production_thermal\",\"production_renewable\",\"production_heat_power\",\"production_hydro\",\"production_pumped_hydro\",\"consumption_total\"]\nfunction App() {\n  useEffect(() => {\n    csv(process.env.PUBLIC_URL + `/electricity.csv`).then((data) => {\n      let earray = {}\n      for (let j = 0; j < data.length; j++){\n        let o = data[j];\n        let edata = []\n      for (let i = 0; i < old_keys.length; i++){\n        edata.push(o[old_keys[i]]);\n      }\n      earray[j] = edata;\n    }\n      if (localStorage.getItem(\"data\") === null){\n        localStorage.clear();\n        localStorage.setItem(\"data\",JSON.stringify(earray));\n      }\n  });\n  });\n  return (\n    <HashRouter>\n        <div>\n          <h1>Ukrainian Energy Statistic</h1>\n          <ul className=\"header\">\n            <li><NavLink to=\"/\">Home</NavLink></li>\n            <li><NavLink to=\"/global\">Global page</NavLink></li>\n            <li><NavLink to=\"/daily\">Daily page</NavLink></li>\n            <li><NavLink to=\"/custom\">Custom page</NavLink></li>\n          </ul>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/global\" component={GlobalView}/>\n            <Route path=\"/daily\" component={DailyView}/>\n            <Route path=\"/custom\" component={CustomView}/>\n          </div>\n        </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}